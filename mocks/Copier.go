// Code generated by mockery v1.0.0
package mocks

import dynamodbcopy "github.com/uniplaces/dynamodbcopy"
import mock "github.com/stretchr/testify/mock"

// Copier is an autogenerated mock type for the Copier type
type Copier struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *Copier) Copy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchProvisioning provides a mock function with given fields:
func (_m *Copier) FetchProvisioning() (dynamodbcopy.Provisioning, error) {
	ret := _m.Called()

	var r0 dynamodbcopy.Provisioning
	if rf, ok := ret.Get(0).(func() dynamodbcopy.Provisioning); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dynamodbcopy.Provisioning)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisioning provides a mock function with given fields: newProvisioning
func (_m *Copier) UpdateProvisioning(newProvisioning dynamodbcopy.Provisioning) (dynamodbcopy.Provisioning, error) {
	ret := _m.Called(newProvisioning)

	var r0 dynamodbcopy.Provisioning
	if rf, ok := ret.Get(0).(func(dynamodbcopy.Provisioning) dynamodbcopy.Provisioning); ok {
		r0 = rf(newProvisioning)
	} else {
		r0 = ret.Get(0).(dynamodbcopy.Provisioning)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dynamodbcopy.Provisioning) error); ok {
		r1 = rf(newProvisioning)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

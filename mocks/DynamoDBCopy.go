// Code generated by mockery v1.0.0
package mocks

import dynamodbcopy "github.com/uniplaces/dynamodbcopy"
import mock "github.com/stretchr/testify/mock"

// DynamoDBCopy is an autogenerated mock type for the DynamoDBCopy type
type DynamoDBCopy struct {
	mock.Mock
}

// CalculateCopyProvisioning provides a mock function with given fields: descriptions
func (_m *DynamoDBCopy) CalculateCopyProvisioning(descriptions dynamodbcopy.TablesDescription) dynamodbcopy.TablesDescription {
	ret := _m.Called(descriptions)

	var r0 dynamodbcopy.TablesDescription
	if rf, ok := ret.Get(0).(func(dynamodbcopy.TablesDescription) dynamodbcopy.TablesDescription); ok {
		r0 = rf(descriptions)
	} else {
		r0 = ret.Get(0).(dynamodbcopy.TablesDescription)
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *DynamoDBCopy) Copy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchProvisioning provides a mock function with given fields:
func (_m *DynamoDBCopy) FetchProvisioning() (dynamodbcopy.TablesDescription, error) {
	ret := _m.Called()

	var r0 dynamodbcopy.TablesDescription
	if rf, ok := ret.Get(0).(func() dynamodbcopy.TablesDescription); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dynamodbcopy.TablesDescription)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisioning provides a mock function with given fields: descriptions
func (_m *DynamoDBCopy) UpdateProvisioning(descriptions dynamodbcopy.TablesDescription) error {
	ret := _m.Called(descriptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(dynamodbcopy.TablesDescription) error); ok {
		r0 = rf(descriptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
